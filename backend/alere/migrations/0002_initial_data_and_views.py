# Generated by Django 3.0.7 on 2020-10-05 19:50

from django.db import migrations
import django.db
from alere import models


def create_views(apps, schema_editor):
    # ??? Created in the application, or when importing
#    models.AccountKinds.objects.create(
#        name="Asset",
#        name_for_positive="Deposit",
#        name_for_negative="Paiement",
#    )
#    models.AccountKinds.objects.create(
#        name="Liability",
#        name_for_positive="Increase",
#        name_for_negative="Decrease",
#    )
#    models.AccountKinds.objects.create(
#        name="Equity",
#        name_for_positive="Increase",
#        name_for_negative="Decrease",
#    )
#    models.AccountKinds.objects.create(
#        name="Income",
#        name_for_positive="Increase",
#        name_for_negative="Decrease",
#    )
#    models.AccountKinds.objects.create(
#        name="Expense",
#        name_for_positive="Increase",
#        name_for_negative="Decrease",
#    )
    models.PriceSources.objects.create(
        name="User",
    )
    models.PriceSources.objects.create(
        name="Yahoo Finance",
    )

    # Compute total invested for each account, in each currency ever used
    # for that account. This will be different from the current balance
    # for stock accounts.
    #
    # CREATE VIEW alr_balances AS
    #       SELECT
    #          alr_accounts.id,
    #          alr_commodities.id as value_commodity_id,
    #          CAST(
    #             sum(alr_splits.scaled_price * alr_splits.scaled_qty)
    #             AS FLOAT
    #          ) / (alr_commodities.price_scale
    #               * alr_accounts.commodity_scu)
    #          AS value,
    #       FROM
    #          alr_splits,
    #          alr_accounts,
    #          alr_commodities
    #       WHERE alr_splits.account_id=alr_accounts.id
    #         AND alr_splits.currency_id=alr_commodities.id
    #       GROUP BY 1,2

class Migration(migrations.Migration):

    dependencies = [
        ('alere', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_views),
        migrations.RunSQL(
        """
        DROP VIEW IF EXISTS alr_price_history;
        CREATE VIEW alr_price_history AS
           SELECT alr_prices.origin_id,
             alr_prices.target_id,
             alr_prices.scaled_price, --  scaled by origin_id's price_scale
             alr_prices.date as mindate,
             COALESCE(
                max(alr_prices.date)
                   OVER (PARTITION BY alr_prices.origin_id, alr_prices.target_id
                         ORDER BY alr_prices.date
                         ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING),
                '2999-12-31 00:00:00'
             ) as maxdate,
             alr_prices.source_id
           FROM alr_prices

           UNION ALL

           --  A currency always has a 1.0 exchange rate with itself. This
           --  simplifies the computation of balances later on
           SELECT alr_commodities.id as origin_id,
              alr_commodities.id as target_id,
              alr_commodities.price_scale as scaled_price,
              '1900-01-01 00:00:00' as mindate,
              '2999-12-31 00:00:00' as maxdate,
              'User' as source_id
            FROM alr_commodities
            WHERE alr_commodities.kind='C'
        ;

        DROP VIEW IF EXISTS alr_balances;
        CREATE VIEW alr_balances AS
           SELECT
              row_number() OVER () as id,   --  for django's sake
              alr_accounts.id AS account_id,
              alr_accounts.commodity_id,
              alr_splits.post_date as mindate,
              COALESCE(
                 max(alr_splits.post_date)
                    OVER (PARTITION BY alr_accounts.id
                          ORDER by post_date
                          ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING),
                 '2999-12-31 00:00:00'
                ) AS maxdate,
              CAST( sum(alr_splits.scaled_qty)
                 OVER (PARTITION BY alr_accounts.id
                       ORDER BY post_date
                       ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                 AS FLOAT
                ) / alr_accounts.commodity_scu
                AS balance
           FROM alr_splits
              JOIN alr_accounts
                 ON (alr_splits.account_id = alr_accounts.id)
        ;

        DROP VIEW IF EXISTS alr_balances_currency;
        CREATE VIEW alr_balances_currency AS
            SELECT
               alr_balances.id,
               alr_balances.account_id,
               alr_commodities.id as commodity_id,
               max(alr_balances.mindate, alr_price_history.mindate) as mindate,
               min(alr_balances.maxdate, alr_price_history.maxdate) as maxdate,
               CAST(alr_balances.balance * alr_price_history.scaled_price
                    AS FLOAT)
                  / source.price_scale as balance,
               alr_balances.balance as shares,
               CAST(alr_price_history.scaled_price AS FLOAT)
                  / source.price_scale
                  as computed_price
            FROM
               alr_balances,
               alr_price_history,
               alr_commodities,
               alr_commodities source
            WHERE
               --  price from: the account's comodity
               source.id = alr_balances.commodity_id
               AND alr_balances.commodity_id=alr_price_history.origin_id

               --  price target: the user's requested commoditty
               AND alr_price_history.target_id=alr_commodities.id

               --  intervals intersect
               AND alr_balances.mindate < alr_price_history.maxdate
               AND alr_price_history.mindate < alr_balances.maxdate

               --  target commodities can only be currencies
               AND alr_commodities.kind='C'
        ;

        DROP VIEW IF EXISTS alr_accounts_list;
        CREATE VIEW alr_accounts_list AS
            SELECT
               alr_accounts.id as id,
               alr_accounts.name as name,
               alr_accounts.parent_id,
               '2000-01-01 00:00:00' as last_reconciled,
               alr_accounts.kind_id,
               alr_accounts.commodity_id,
               alr_accounts.commodity_scu as price_scale,
               alr_institutions.name as institution,
               alr_accounts.closed,
               alr_accounts.iban
            FROM
               alr_accounts
               LEFT JOIN alr_institutions
                  ON (alr_accounts.institution_id=alr_institutions.id)
        ;
        """
        )
    ]
